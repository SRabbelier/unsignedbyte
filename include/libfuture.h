/* 
 *	 /usr/devel/include/libfuture.h
 *	 Generated by sql2class v1.9.1 by (C) AH 2000-2006
 *	  using command line
 *	  $ sql2class -build -lib libfuture -sqlite str-future -namespace db -overwrite -getset
 *	 Date: Thu Sep 28 00:25:14 2006
 */

/*
Copyright (C) 2001-2006  Anders Hedstrom (grymse@alhem.net)

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sqlite3.h>
#include <libsqlitewrapped.h>
#include <map>

#include <vector>
#include <string>

#ifndef _LIBFUTURE_H
#define _LIBFUTURE_H

#ifdef _WIN32
#define strncasecmp _strnicmp
#define strcasecmp _stricmp
#endif // _WIN32

/**
 **  Class 'Account' and 'cAccount'
 **/

namespace db
{
class Account {
public:
	Account(Database *);
	Account(Database *,const std::string& );
	Account(Database *,Query *,int = 0 /* offset */);
	Account(Database&,long num);
	Account(Database&,const std::string&  name);
	~Account();
	Database& GetDatabase() { return *database; }

	unsigned long long int insert();
	void update();
	void save();
	void erase();
	std::string xml();
	std::string xml(const std::string& ,const std::string& );
	size_t num_cols();

	// table columns
	long                     num; // integer
	std::string              name; // varchar(255)
	std::string              passwd; // varchar(255)
	std::string              display_name; // varchar(255)
	char                     wizard; // tinyint(1)
	std::string              email; // varchar(255)
	long                     area; // integer
	long                     chunk; // integer
	long                     chunkx; // integer
	long                     chunky; // integer
	long                     facing; // integer
	long                     wizview; // integer
	long                     race; // integer
	//
private:
	void clear();
	void spawn(const std::string& );
	void spawn(Query *,int = 0 /* offset */);
	void select(const std::string& );
	void update(long num);
	//
	Database *database;
	short new_object;
}; // End of class 'Account'

} // end of namespace

/**
 **  Class 'Eventcount' and 'cEventcount'
 **/

namespace db
{
class Eventcount {
public:
	Eventcount(Database *);
	Eventcount(Database *,const std::string& );
	Eventcount(Database *,Query *,int = 0 /* offset */);
	Eventcount(Database&,long num);
	Eventcount(Database&,const std::string&  event_name);
	~Eventcount();
	Database& GetDatabase() { return *database; }

	unsigned long long int insert();
	void update();
	void save();
	void erase();
	std::string xml();
	std::string xml(const std::string& ,const std::string& );
	size_t num_cols();

	// table columns
	long                     num; // integer
	std::string              event_name; // varchar(255)
	long                     count; // integer
	//
private:
	void clear();
	void spawn(const std::string& );
	void spawn(Query *,int = 0 /* offset */);
	void select(const std::string& );
	void update(long num);
	//
	Database *database;
	short new_object;
}; // End of class 'Eventcount'

} // end of namespace

/**
 **  Class 'Area' and 'cArea'
 **/

namespace db
{
class Area {
public:
	Area(Database *);
	Area(Database *,const std::string& );
	Area(Database *,Query *,int = 0 /* offset */);
	Area(Database&,long num);
	Area(Database&,const std::string&  name);
	~Area();
	Database& GetDatabase() { return *database; }

	unsigned long long int insert();
	void update();
	void save();
	void erase();
	std::string xml();
	std::string xml(const std::string& ,const std::string& );
	size_t num_cols();

	// table columns
	long                     num; // integer
	std::string              name; // varchar(255)
	long                     width; // integer
	long                     height; // integer
	//
private:
	void clear();
	void spawn(const std::string& );
	void spawn(Query *,int = 0 /* offset */);
	void select(const std::string& );
	void update(long num);
	//
	Database *database;
	short new_object;
}; // End of class 'Area'

} // end of namespace

/**
 **  Class 'Chunk' and 'cChunk'
 **/

namespace db
{
class Chunk {
public:
	Chunk(Database *);
	Chunk(Database *,const std::string& );
	Chunk(Database *,Query *,int = 0 /* offset */);
	Chunk(Database&,long num);
	Chunk(Database&,long area,long x,long y,long z);
	~Chunk();
	Database& GetDatabase() { return *database; }

	unsigned long long int insert();
	void update();
	void save();
	void erase();
	std::string xml();
	std::string xml(const std::string& ,const std::string& );
	size_t num_cols();

	// table columns
	long                     num; // integer
	long                     area; // integer
	std::string              terrain; // text
	long                     x; // integer
	long                     y; // integer
	long                     z; // integer
	long                     created_by; // integer
	std::string              created_date; // datetime
	//
private:
	void clear();
	void spawn(const std::string& );
	void spawn(Query *,int = 0 /* offset */);
	void select(const std::string& );
	void update(long num);
	//
	Database *database;
	short new_object;
}; // End of class 'Chunk'

} // end of namespace

/**
 **  Class 'Chunkinfo' and 'cChunkinfo'
 **/

namespace db
{
class Chunkinfo {
public:
	Chunkinfo(Database *);
	Chunkinfo(Database *,const std::string& );
	Chunkinfo(Database *,Query *,int = 0 /* offset */);
	Chunkinfo(Database&,long num);
	Chunkinfo(Database&,long chunk,long type,long x,long y);
	~Chunkinfo();
	Database& GetDatabase() { return *database; }

	unsigned long long int insert();
	void update();
	void save();
	void erase();
	std::string xml();
	std::string xml(const std::string& ,const std::string& );
	size_t num_cols();

	// table columns
	long                     num; // integer
	long                     chunk; // integer
	long                     type; // integer
	long                     x; // integer
	long                     y; // integer
	std::string              data; // varchar(255)
	long                     to_area; // integer
	long                     to_chunk; // integer
	long                     to_x; // integer
	long                     to_y; // integer
	//
private:
	void clear();
	void spawn(const std::string& );
	void spawn(Query *,int = 0 /* offset */);
	void select(const std::string& );
	void update(long num);
	//
	Database *database;
	short new_object;
}; // End of class 'Chunkinfo'

} // end of namespace

/**
 **  Class 'Terrain' and 'cTerrain'
 **/

namespace db
{
class Terrain {
public:
	Terrain(Database *);
	Terrain(Database *,const std::string& );
	Terrain(Database *,Query *,int = 0 /* offset */);
	Terrain(Database&,long num);
	Terrain(Database&,long area,const std::string&  tchar);
	~Terrain();
	Database& GetDatabase() { return *database; }

	unsigned long long int insert();
	void update();
	void save();
	void erase();
	std::string xml();
	std::string xml(const std::string& ,const std::string& );
	size_t num_cols();

	// table columns
	long                     num; // integer
	long                     area; // integer
	std::string              name; // varchar(255)
	std::string              tchar; // char(1)
	std::string              tcolor; // varchar(10)
	long                     impassable; // integer
	double                   delay; // float
	//
private:
	void clear();
	void spawn(const std::string& );
	void spawn(Query *,int = 0 /* offset */);
	void select(const std::string& );
	void update(long num);
	//
	Database *database;
	short new_object;
}; // End of class 'Terrain'

} // end of namespace

/**
 **  Class 'Steps' and 'cSteps'
 **/

namespace db
{
class Steps {
public:
	Steps(Database *);
	Steps(Database *,const std::string& );
	Steps(Database *,Query *,int = 0 /* offset */);
	Steps(Database&,long num);
	Steps(Database&,long player,long area,long zcoord,long ycoord);
	~Steps();
	Database& GetDatabase() { return *database; }

	unsigned long long int insert();
	void update();
	void save();
	void erase();
	std::string xml();
	std::string xml(const std::string& ,const std::string& );
	size_t num_cols();

	// table columns
	long                     num; // integer
	long                     player; // integer
	long                     area; // integer
	long                     zcoord; // integer
	long                     ycoord; // integer
	std::string              xcoords; // text
	//
private:
	void clear();
	void spawn(const std::string& );
	void spawn(Query *,int = 0 /* offset */);
	void select(const std::string& );
	void update(long num);
	//
	Database *database;
	short new_object;
}; // End of class 'Steps'

} // end of namespace

/**
 **  Class 'Race' and 'cRace'
 **/

namespace db
{
class Race {
public:
	Race(Database *);
	Race(Database *,const std::string& );
	Race(Database *,Query *,int = 0 /* offset */);
	Race(Database&,long num);
	Race(Database&,const std::string&  name);
	~Race();
	Database& GetDatabase() { return *database; }

	unsigned long long int insert();
	void update();
	void save();
	void erase();
	std::string xml();
	std::string xml(const std::string& ,const std::string& );
	size_t num_cols();

	// table columns
	long                     num; // integer
	std::string              name; // varchar(255)
	double                   sightrange; // float
	double                   hearing; // float
	//
private:
	void clear();
	void spawn(const std::string& );
	void spawn(Query *,int = 0 /* offset */);
	void select(const std::string& );
	void update(long num);
	//
	Database *database;
	short new_object;
}; // End of class 'Race'

} // end of namespace
#endif // _LIBFUTURE_H

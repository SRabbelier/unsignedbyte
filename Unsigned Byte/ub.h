/*
 *	 ub.h
 *	 Generated by sql2class v1.8 by (C) AH 2000-2006
 *	  using command line
 *	  $ sql2class.exe -lib ub -sqlite ub.sql -namespace db -overwrite -getset
 *	 Date: Sun Aug 19 13:02:35 2007
 */

/*
Copyright (C) 2001-2006  Anders Hedstrom (grymse@alhem.net)

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
*/

#include <string>
#include <sqlite3.h>
#include <Database.h>
#include <Query.h>

#ifndef _UB_H
#define _UB_H

/**
 **  Class 'Accounts' and 'cAccounts'
 **/

namespace db
{
class Accounts {
public:
	Accounts(Database *);
	Accounts(Database *,const std::string& );
	Accounts(Database *,Query *,int = 0 /* offset */);
	Accounts(Database&,long accountid);
	~Accounts();
	Database& GetDatabase() { return *database; }

	unsigned long insert();
	void update();
	void save();
	void erase();
	std::string xml();
	std::string xml(const std::string& ,const std::string& );
	size_t num_cols();

	// table columns
	long                     accountid; // INTEGER
	std::string              name; // TEXT
	std::string              password; // TEXT
	//
private:
	void clear();
	void spawn(const std::string& );
	void spawn(Query *,int = 0 /* offset */);
	void select(const std::string& );
	void update(long accountid);
	//
	Database *database;
	short new_object;
}; // End of class 'Accounts'

} // end of namespace

/**
 **  Class 'Areas' and 'cAreas'
 **/

namespace db
{
class Areas {
public:
	Areas(Database *);
	Areas(Database *,const std::string& );
	Areas(Database *,Query *,int = 0 /* offset */);
	Areas(Database&,long areaid);
	~Areas();
	Database& GetDatabase() { return *database; }

	unsigned long insert();
	void update();
	void save();
	void erase();
	std::string xml();
	std::string xml(const std::string& ,const std::string& );
	size_t num_cols();

	// table columns
	long                     areaid; // INTEGER
	std::string              name; // TEXT
	std::string              description; // TEXT
	long                     height; // INTEGER
	long                     width; // INTEGER
	//
private:
	void clear();
	void spawn(const std::string& );
	void spawn(Query *,int = 0 /* offset */);
	void select(const std::string& );
	void update(long areaid);
	//
	Database *database;
	short new_object;
}; // End of class 'Areas'

} // end of namespace

/**
 **  Class 'Branches' and 'cBranches'
 **/

namespace db
{
class Branches {
public:
	Branches(Database *);
	Branches(Database *,const std::string& );
	Branches(Database *,Query *,int = 0 /* offset */);
	Branches(Database&,long branchid);
	~Branches();
	Database& GetDatabase() { return *database; }

	unsigned long insert();
	void update();
	void save();
	void erase();
	std::string xml();
	std::string xml(const std::string& ,const std::string& );
	size_t num_cols();

	// table columns
	long                     branchid; // INTEGER
	std::string              name; // TEXT
	long                     fktree; // INTEGER
	long                     fkprimarystat; // INTEGER
	long                     fksecondarystat; // INTEGER
	//
private:
	void clear();
	void spawn(const std::string& );
	void spawn(Query *,int = 0 /* offset */);
	void select(const std::string& );
	void update(long branchid);
	//
	Database *database;
	short new_object;
}; // End of class 'Branches'

} // end of namespace

/**
 **  Class 'AccountCharacter' and 'cAccountCharacter'
 **/

namespace db
{
class AccountCharacter {
public:
	AccountCharacter(Database *);
	AccountCharacter(Database *,const std::string& );
	AccountCharacter(Database *,Query *,int = 0 /* offset */);
	AccountCharacter(Database&,long accountcharacterid);
	~AccountCharacter();
	Database& GetDatabase() { return *database; }

	unsigned long insert();
	void update();
	void save();
	void erase();
	std::string xml();
	std::string xml(const std::string& ,const std::string& );
	size_t num_cols();

	// table columns
	long                     accountcharacterid; // INTEGER
	long                     fkcharacter; // INTEGER
	long                     fkaccount; // INTEGER
	//
private:
	void clear();
	void spawn(const std::string& );
	void spawn(Query *,int = 0 /* offset */);
	void select(const std::string& );
	void update(long accountcharacterid);
	//
	Database *database;
	short new_object;
}; // End of class 'AccountCharacter'

} // end of namespace

/**
 **  Class 'CharacterBranch' and 'cCharacterBranch'
 **/

namespace db
{
class CharacterBranch {
public:
	CharacterBranch(Database *);
	CharacterBranch(Database *,const std::string& );
	CharacterBranch(Database *,Query *,int = 0 /* offset */);
	CharacterBranch(Database&,long characterbranchid);
	~CharacterBranch();
	Database& GetDatabase() { return *database; }

	unsigned long insert();
	void update();
	void save();
	void erase();
	std::string xml();
	std::string xml(const std::string& ,const std::string& );
	size_t num_cols();

	// table columns
	long                     characterbranchid; // INTEGER
	long                     fkcharacter; // INTEGER
	long                     fkbranch; // INTEGER
	//
private:
	void clear();
	void spawn(const std::string& );
	void spawn(Query *,int = 0 /* offset */);
	void select(const std::string& );
	void update(long characterbranchid);
	//
	Database *database;
	short new_object;
}; // End of class 'CharacterBranch'

} // end of namespace

/**
 **  Class 'CharacterCluster' and 'cCharacterCluster'
 **/

namespace db
{
class CharacterCluster {
public:
	CharacterCluster(Database *);
	CharacterCluster(Database *,const std::string& );
	CharacterCluster(Database *,Query *,int = 0 /* offset */);
	CharacterCluster(Database&,long characterclusterid);
	~CharacterCluster();
	Database& GetDatabase() { return *database; }

	unsigned long insert();
	void update();
	void save();
	void erase();
	std::string xml();
	std::string xml(const std::string& ,const std::string& );
	size_t num_cols();

	// table columns
	long                     characterclusterid; // INTEGER
	//
private:
	void clear();
	void spawn(const std::string& );
	void spawn(Query *,int = 0 /* offset */);
	void select(const std::string& );
	void update(long characterclusterid);
	//
	Database *database;
	short new_object;
}; // End of class 'CharacterCluster'

} // end of namespace

/**
 **  Class 'Characters' and 'cCharacters'
 **/

namespace db
{
class Characters {
public:
	Characters(Database *);
	Characters(Database *,const std::string& );
	Characters(Database *,Query *,int = 0 /* offset */);
	Characters(Database&,long characterid);
	~Characters();
	Database& GetDatabase() { return *database; }

	unsigned long insert();
	void update();
	void save();
	void erase();
	std::string xml();
	std::string xml(const std::string& ,const std::string& );
	size_t num_cols();

	// table columns
	long                     characterid; // INTEGER
	long                     fkrace; // INTEGER
	long                     fkroom; // INTEGER
	std::string              name; // TEXT
	std::string              description; // TEXT
	//
private:
	void clear();
	void spawn(const std::string& );
	void spawn(Query *,int = 0 /* offset */);
	void select(const std::string& );
	void update(long characterid);
	//
	Database *database;
	short new_object;
}; // End of class 'Characters'

} // end of namespace

/**
 **  Class 'CharacterSkill' and 'cCharacterSkill'
 **/

namespace db
{
class CharacterSkill {
public:
	CharacterSkill(Database *);
	CharacterSkill(Database *,const std::string& );
	CharacterSkill(Database *,Query *,int = 0 /* offset */);
	CharacterSkill(Database&,long characterskillid);
	~CharacterSkill();
	Database& GetDatabase() { return *database; }

	unsigned long insert();
	void update();
	void save();
	void erase();
	std::string xml();
	std::string xml(const std::string& ,const std::string& );
	size_t num_cols();

	// table columns
	long                     characterskillid; // INTEGER
	long                     fkcharacter; // INTEGER
	long                     fkbranch; // INTEGER
	//
private:
	void clear();
	void spawn(const std::string& );
	void spawn(Query *,int = 0 /* offset */);
	void select(const std::string& );
	void update(long characterskillid);
	//
	Database *database;
	short new_object;
}; // End of class 'CharacterSkill'

} // end of namespace

/**
 **  Class 'CharacterStat' and 'cCharacterStat'
 **/

namespace db
{
class CharacterStat {
public:
	CharacterStat(Database *);
	CharacterStat(Database *,const std::string& );
	CharacterStat(Database *,Query *,int = 0 /* offset */);
	CharacterStat(Database&,long characterstatid);
	~CharacterStat();
	Database& GetDatabase() { return *database; }

	unsigned long insert();
	void update();
	void save();
	void erase();
	std::string xml();
	std::string xml(const std::string& ,const std::string& );
	size_t num_cols();

	// table columns
	long                     characterstatid; // INTEGER
	long                     fkcharacter; // INTEGER
	long                     fkstat; // INTEGER
	//
private:
	void clear();
	void spawn(const std::string& );
	void spawn(Query *,int = 0 /* offset */);
	void select(const std::string& );
	void update(long characterstatid);
	//
	Database *database;
	short new_object;
}; // End of class 'CharacterStat'

} // end of namespace

/**
 **  Class 'CharacterTree' and 'cCharacterTree'
 **/

namespace db
{
class CharacterTree {
public:
	CharacterTree(Database *);
	CharacterTree(Database *,const std::string& );
	CharacterTree(Database *,Query *,int = 0 /* offset */);
	CharacterTree(Database&,long charactertreeid);
	~CharacterTree();
	Database& GetDatabase() { return *database; }

	unsigned long insert();
	void update();
	void save();
	void erase();
	std::string xml();
	std::string xml(const std::string& ,const std::string& );
	size_t num_cols();

	// table columns
	long                     charactertreeid; // INTEGER
	long                     fkcharacter; // INTEGER
	long                     fktree; // INTEGER
	//
private:
	void clear();
	void spawn(const std::string& );
	void spawn(Query *,int = 0 /* offset */);
	void select(const std::string& );
	void update(long charactertreeid);
	//
	Database *database;
	short new_object;
}; // End of class 'CharacterTree'

} // end of namespace

/**
 **  Class 'Clusters' and 'cClusters'
 **/

namespace db
{
class Clusters {
public:
	Clusters(Database *);
	Clusters(Database *,const std::string& );
	Clusters(Database *,Query *,int = 0 /* offset */);
	Clusters(Database&,long clusterid);
	~Clusters();
	Database& GetDatabase() { return *database; }

	unsigned long insert();
	void update();
	void save();
	void erase();
	std::string xml();
	std::string xml(const std::string& ,const std::string& );
	size_t num_cols();

	// table columns
	long                     clusterid; // INTEGER
	std::string              name; // TEXT
	//
private:
	void clear();
	void spawn(const std::string& );
	void spawn(Query *,int = 0 /* offset */);
	void select(const std::string& );
	void update(long clusterid);
	//
	Database *database;
	short new_object;
}; // End of class 'Clusters'

} // end of namespace

/**
 **  Class 'Colours' and 'cColours'
 **/

namespace db
{
class Colours {
public:
	Colours(Database *);
	Colours(Database *,const std::string& );
	Colours(Database *,Query *,int = 0 /* offset */);
	Colours(Database&,long colourid);
	~Colours();
	Database& GetDatabase() { return *database; }

	unsigned long insert();
	void update();
	void save();
	void erase();
	std::string xml();
	std::string xml(const std::string& ,const std::string& );
	size_t num_cols();

	// table columns
	long                     colourid; // INTEGER
	std::string              name; // TEXT
	std::string              code; // TEXT
	std::string              colourstring; // TEXT
	long                     ansi; // INTEGER
	//
private:
	void clear();
	void spawn(const std::string& );
	void spawn(Query *,int = 0 /* offset */);
	void select(const std::string& );
	void update(long colourid);
	//
	Database *database;
	short new_object;
}; // End of class 'Colours'

} // end of namespace

/**
 **  Class 'Commands' and 'cCommands'
 **/

namespace db
{
class Commands {
public:
	Commands(Database *);
	Commands(Database *,const std::string& );
	Commands(Database *,Query *,int = 0 /* offset */);
	Commands(Database&,long commandid);
	~Commands();
	Database& GetDatabase() { return *database; }

	unsigned long insert();
	void update();
	void save();
	void erase();
	std::string xml();
	std::string xml(const std::string& ,const std::string& );
	size_t num_cols();

	// table columns
	long                     commandid; // INTEGER
	std::string              name; // TEXT
	long                     grantgroup; // INTEGER
	long                     highforce; // INTEGER
	long                     force; // INTEGER
	long                     lowforce; // INTEGER
	//
private:
	void clear();
	void spawn(const std::string& );
	void spawn(Query *,int = 0 /* offset */);
	void select(const std::string& );
	void update(long commandid);
	//
	Database *database;
	short new_object;
}; // End of class 'Commands'

} // end of namespace

/**
 **  Class 'Exits' and 'cExits'
 **/

namespace db
{
class Exits {
public:
	Exits(Database *);
	Exits(Database *,const std::string& );
	Exits(Database *,Query *,int = 0 /* offset */);
	Exits(Database&,long exitid);
	~Exits();
	Database& GetDatabase() { return *database; }

	unsigned long insert();
	void update();
	void save();
	void erase();
	std::string xml();
	std::string xml(const std::string& ,const std::string& );
	size_t num_cols();

	// table columns
	long                     exitid; // INTEGER
	long                     dir; // INTEGER
	//
private:
	void clear();
	void spawn(const std::string& );
	void spawn(Query *,int = 0 /* offset */);
	void select(const std::string& );
	void update(long exitid);
	//
	Database *database;
	short new_object;
}; // End of class 'Exits'

} // end of namespace

/**
 **  Class 'GrantGroups' and 'cGrantGroups'
 **/

namespace db
{
class GrantGroups {
public:
	GrantGroups(Database *);
	GrantGroups(Database *,const std::string& );
	GrantGroups(Database *,Query *,int = 0 /* offset */);
	GrantGroups(Database&,long grantgroupid);
	~GrantGroups();
	Database& GetDatabase() { return *database; }

	unsigned long insert();
	void update();
	void save();
	void erase();
	std::string xml();
	std::string xml(const std::string& ,const std::string& );
	size_t num_cols();

	// table columns
	long                     grantgroupid; // INTEGER
	std::string              name; // TEXT
	long                     defaultgrant; // INTEGER
	long                     implies; // INTEGER
	//
private:
	void clear();
	void spawn(const std::string& );
	void spawn(Query *,int = 0 /* offset */);
	void select(const std::string& );
	void update(long grantgroupid);
	//
	Database *database;
	short new_object;
}; // End of class 'GrantGroups'

} // end of namespace

/**
 **  Class 'Permissions' and 'cPermissions'
 **/

namespace db
{
class Permissions {
public:
	Permissions(Database *);
	Permissions(Database *,const std::string& );
	Permissions(Database *,Query *,int = 0 /* offset */);
	Permissions(Database&,long permissionid);
	~Permissions();
	Database& GetDatabase() { return *database; }

	unsigned long insert();
	void update();
	void save();
	void erase();
	std::string xml();
	std::string xml(const std::string& ,const std::string& );
	size_t num_cols();

	// table columns
	long                     permissionid; // INTEGER
	long                     fkaccount; // INTEGER
	long                     fkcommand; // INTEGER
	long                     fkgrantgroup; // INTEGER
	long                     grant; // INTEGER
	//
private:
	void clear();
	void spawn(const std::string& );
	void spawn(Query *,int = 0 /* offset */);
	void select(const std::string& );
	void update(long permissionid);
	//
	Database *database;
	short new_object;
}; // End of class 'Permissions'

} // end of namespace

/**
 **  Class 'Races' and 'cRaces'
 **/

namespace db
{
class Races {
public:
	Races(Database *);
	Races(Database *,const std::string& );
	Races(Database *,Query *,int = 0 /* offset */);
	Races(Database&,long raceid);
	~Races();
	Database& GetDatabase() { return *database; }

	unsigned long insert();
	void update();
	void save();
	void erase();
	std::string xml();
	std::string xml(const std::string& ,const std::string& );
	size_t num_cols();

	// table columns
	long                     raceid; // INTEGER
	std::string              name; // TEXT
	//
private:
	void clear();
	void spawn(const std::string& );
	void spawn(Query *,int = 0 /* offset */);
	void select(const std::string& );
	void update(long raceid);
	//
	Database *database;
	short new_object;
}; // End of class 'Races'

} // end of namespace

/**
 **  Class 'Rooms' and 'cRooms'
 **/

namespace db
{
class Rooms {
public:
	Rooms(Database *);
	Rooms(Database *,const std::string& );
	Rooms(Database *,Query *,int = 0 /* offset */);
	Rooms(Database&,long roomid);
	~Rooms();
	Database& GetDatabase() { return *database; }

	unsigned long insert();
	void update();
	void save();
	void erase();
	std::string xml();
	std::string xml(const std::string& ,const std::string& );
	size_t num_cols();

	// table columns
	long                     roomid; // INTEGER
	std::string              name; // TEXT
	std::string              description; // TEXT
	long                     fkarea; // INTEGER
	long                     fksector; // INTEGER
	long                     width; // INTEGER
	long                     length; // INTEGER
	long                     height; // INTEGER
	//
private:
	void clear();
	void spawn(const std::string& );
	void spawn(Query *,int = 0 /* offset */);
	void select(const std::string& );
	void update(long roomid);
	//
	Database *database;
	short new_object;
}; // End of class 'Rooms'

} // end of namespace

/**
 **  Class 'Sectors' and 'cSectors'
 **/

namespace db
{
class Sectors {
public:
	Sectors(Database *);
	Sectors(Database *,const std::string& );
	Sectors(Database *,Query *,int = 0 /* offset */);
	Sectors(Database&,long sectorid);
	~Sectors();
	Database& GetDatabase() { return *database; }

	unsigned long insert();
	void update();
	void save();
	void erase();
	std::string xml();
	std::string xml(const std::string& ,const std::string& );
	size_t num_cols();

	// table columns
	long                     sectorid; // INTEGER
	std::string              name; // TEXT
	std::string              symbol; // TEXT
	long                     movecost; // INTEGER
	long                     water; // INTEGER
	//
private:
	void clear();
	void spawn(const std::string& );
	void spawn(Query *,int = 0 /* offset */);
	void select(const std::string& );
	void update(long sectorid);
	//
	Database *database;
	short new_object;
}; // End of class 'Sectors'

} // end of namespace

/**
 **  Class 'Skills' and 'cSkills'
 **/

namespace db
{
class Skills {
public:
	Skills(Database *);
	Skills(Database *,const std::string& );
	Skills(Database *,Query *,int = 0 /* offset */);
	Skills(Database&,long skillid);
	~Skills();
	Database& GetDatabase() { return *database; }

	unsigned long insert();
	void update();
	void save();
	void erase();
	std::string xml();
	std::string xml(const std::string& ,const std::string& );
	size_t num_cols();

	// table columns
	long                     skillid; // INTEGER
	std::string              name; // TEXT
	long                     fkbranch; // INTEGER
	//
private:
	void clear();
	void spawn(const std::string& );
	void spawn(Query *,int = 0 /* offset */);
	void select(const std::string& );
	void update(long skillid);
	//
	Database *database;
	short new_object;
}; // End of class 'Skills'

} // end of namespace

/**
 **  Class 'Stats' and 'cStats'
 **/

namespace db
{
class Stats {
public:
	Stats(Database *);
	Stats(Database *,const std::string& );
	Stats(Database *,Query *,int = 0 /* offset */);
	Stats(Database&,long statid);
	~Stats();
	Database& GetDatabase() { return *database; }

	unsigned long insert();
	void update();
	void save();
	void erase();
	std::string xml();
	std::string xml(const std::string& ,const std::string& );
	size_t num_cols();

	// table columns
	long                     statid; // INTEGER
	std::string              name; // TEXT
	std::string              shortname; // TEXT
	//
private:
	void clear();
	void spawn(const std::string& );
	void spawn(Query *,int = 0 /* offset */);
	void select(const std::string& );
	void update(long statid);
	//
	Database *database;
	short new_object;
}; // End of class 'Stats'

} // end of namespace

/**
 **  Class 'Trees' and 'cTrees'
 **/

namespace db
{
class Trees {
public:
	Trees(Database *);
	Trees(Database *,const std::string& );
	Trees(Database *,Query *,int = 0 /* offset */);
	Trees(Database&,long treeid);
	~Trees();
	Database& GetDatabase() { return *database; }

	unsigned long insert();
	void update();
	void save();
	void erase();
	std::string xml();
	std::string xml(const std::string& ,const std::string& );
	size_t num_cols();

	// table columns
	long                     treeid; // INTEGER
	std::string              name; // TEXT
	long                     fkcluster; // INTEGER
	long                     fkprimarystat; // INTEGER
	long                     fksecondarystat; // INTEGER
	//
private:
	void clear();
	void spawn(const std::string& );
	void spawn(Query *,int = 0 /* offset */);
	void select(const std::string& );
	void update(long treeid);
	//
	Database *database;
	short new_object;
}; // End of class 'Trees'

} // end of namespace

/**
 **  Class 'Version' and 'cVersion'
 **/

namespace db
{
class Version {
public:
	Version(Database *);
	Version(Database *,const std::string& );
	Version(Database *,Query *,int = 0 /* offset */);
	Version(Database&,long version);
	~Version();
	Database& GetDatabase() { return *database; }

	unsigned long insert();
	void update();
	void save();
	void erase();
	std::string xml();
	std::string xml(const std::string& ,const std::string& );
	size_t num_cols();

	// table columns
	long                     version; // INTEGER
	std::string              versiontext; // TEXT
	long                     major; // INTEGER
	long                     minor; // INTEGER
	long                     micro; // INTEGER
	//
private:
	void clear();
	void spawn(const std::string& );
	void spawn(Query *,int = 0 /* offset */);
	void select(const std::string& );
	void update(long version);
	//
	Database *database;
	short new_object;
}; // End of class 'Version'

} // end of namespace
#endif // _UB_H
